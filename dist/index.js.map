{"version":3,"sources":["../src/index.ts"],"sourcesContent":["interface UniconstItem {\r\n    label: string\r\n    value: string | number\r\n    color: string\r\n    [key: string]: any\r\n}\r\n\r\ninterface UniconstOptions {\r\n    [key: string]: UniconstItem\r\n}\r\n\r\ninterface UniconstMaps {\r\n    [key: UniconstItem['value']]: UniconstItem['label']\r\n}\r\n\r\nclass Uniconst<T extends UniconstOptions> {\r\n    constructor (\r\n        private readonly __source: T\r\n    ) {}\r\n\r\n    /**\r\n     * 根据键获取对应的值\r\n     *\r\n     * 此方法通过泛型K来限制可以访问的属性类型，确保类型安全\r\n     * 它利用了TypeScript的索引访问特性，以键值的形式获取对象的属性\r\n     *\r\n     * @param key - 要获取的属性的键，必须是对象T的有效键\r\n     * @returns 返回对象T中与键K对应的值\r\n     */\r\n    get<K extends keyof T> (key: K): T[K] {\r\n        return this.__source[key]\r\n    }\r\n\r\n    /**\r\n     * 获取选项数组\r\n     *\r\n     * 此方法用于获取当前源数据中的所有选项这些选项是源数据对象的值的集合\r\n     * 如果源数据为空或者不存在，将返回一个空数组\r\n     *\r\n     * @returns {UniconstItem[]} 一个包含所有选项的数组如果源数据为空，则返回空数组\r\n     */\r\n    getOptions (): UniconstItem[] {\r\n        return Object.values(this.__source) ?? []\r\n    }\r\n\r\n    /**\r\n     * 将当前对象的选项转换为标签映射\r\n     * 此方法主要用于生成一个映射对象，其中键是选项的值，值是选项的标签\r\n     * @returns {UniconstMaps} 返回一个对象，其中每个选项的值映射到其对应的标签\r\n     */\r\n    toLabelMap (): UniconstMaps {\r\n        return this.getOptions().reduce((obj, item) => {\r\n            return { ...obj, [item.value]: item.label }\r\n        }, {}) as UniconstMaps\r\n    }\r\n}\r\n\r\nexport default Uniconst\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA,IAAM,WAAN,MAA0C;AAAA,EACtC,YACqB,UACnB;AADmB;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWH,IAAwB,KAAc;AAClC,WAAO,KAAK,SAAS,GAAG;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAA8B;AAC1B,WAAO,OAAO,OAAO,KAAK,QAAQ,KAAK,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAA4B;AACxB,WAAO,KAAK,WAAW,EAAE,OAAO,CAAC,KAAK,SAAS;AAC3C,aAAO,EAAE,GAAG,KAAK,CAAC,KAAK,KAAK,GAAG,KAAK,MAAM;AAAA,IAC9C,GAAG,CAAC,CAAC;AAAA,EACT;AACJ;AAEA,IAAO,gBAAQ;","names":[]}